<div class="card card-primary card-outline">
    <div class="card-header">
        <h3 class="card-title">
            <i class="fa fa-edit"></i>
            CHAPTERS
        </h3>
        <div class="card-tools">
            <button type="button" class="btn btn-tool" data-card-widget="collapse">
                <i class="fa fa-minus"></i>
            </button>
        </div>
    </div>
    <div class="card-body">
        <button type="submit" class="btn btn-primary" data-toggle="modal" data-target="#AddEditEmpModal" @onclick="@AddChapter">
            <i class="nav-icon fa fa-plus"></i>
            New Chapter
        </button>
        <hr />
        <div class="row">
            <div class="col-12">
                <div class="nav flex-column nav-tabs h-100" id="vert-tabs-tab" role="tablist" aria-orientation="vertical">
                    <GenericList Elements="Chapter">
                        <WithElementsTemplate>
                            <div class="table-responsive">
                                <table class="table">
                                    @foreach (var item in Chapter.OrderByDescending(s => s.CreatedDate))
                                    {
                                        <tr>
                                            <td id="user-address"><a href="projects/@topicsId/@item.Id">@item.Name</a></td>
                                            <td>
                                                <button type="submit" class="btn btn-success" data-toggle="modal" data-target="#EditEmpModal"
                                                        @onclick="@(() => EditChapter(item.Id))">
                                                    <i class="nav-icon fa fa-edit"></i>
                                                </button>
                                                <button class="btn btn-danger" @onclick="@(() => Delete(item.Id))">
                                                    <i class="nav-icon fa fa-trash"></i>
                                                </button>
                                            </td>
                                        </tr>
                                    }
                                </table>
                            </div>
                        </WithElementsTemplate>
                    </GenericList>
                </div>
            </div>
        </div>
    </div>
    <div class="card-footer text-center">
        <Pagination CurrentPage="Request.Page" Radius="4" TotalPagesQuantity="totalAmountPages"
                    SelectedPage="SelectedPage" />
    </div>
</div>




<div class="modal fade" id="AddEditEmpModal">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title">@modalTitle</h3>
                <button type="button" class="close" data-dismiss="modal">
                    <span aria-hidden="true">X</span>
                </button>
            </div>
            <div class="modal-body">
                @if (Failure)
                {
                    <div class="text-danger">
                        <h6>
                            @ErrorMessage
                        </h6>
                    </div>
                }
                <EditForm Model="@chapterRequest" OnValidSubmit="SaveChapter">
                    <div class="row">
                        <DataAnnotationsValidator />
                        <div class="col-md-12">
                            <div class="form-group">
                                <InputText @bind-Value="@chapterRequest.Name" class="form-control" placeholder="Chapter Name" />
                                <ValidationMessage For="@(() => chapterRequest.Name)" />
                            </div>
                        </div>

                        <div class="modal-footer">
                            @if (IsSearching)
                            {
                                <button type="submit" class="btn btn-block btn-success" disabled><span class="fa fa-refresh fas spinning" style="margin-right:10px;"></span>@modalTitle</button>
                            }
                            else
                            {
                                <button type="submit" class="btn btn-block btn-success">@modalTitle</button>
                            }
                        </div>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>


<div class="modal fade" id="EditEmpModal">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title">@modalTitle</h3>
                <button type="button" class="close" data-dismiss="modal">
                    <span aria-hidden="true">X</span>
                </button>
            </div>
            <div class="modal-body">
                @if (Failure)
                {
                    <div class="text-danger">
                        <h6>
                            @ErrorMessageEdit
                        </h6>
                    </div>
                }
                <EditForm Model="@chapterRequest" OnValidSubmit="SaveEditChapter">
                    <div class="row">
                        <DataAnnotationsValidator />
                        <div class="col-md-12">
                            <div class="form-group">
                                <InputText @bind-Value="@chapterRequest.Name" class="form-control" placeholder="Chapter Name" />
                                <ValidationMessage For="@(() => chapterRequest.Name)" />
                            </div>
                        </div>

                        <div class="modal-footer">
                            @if (IsSearching)
                            {
                                <button type="submit" class="btn btn-block btn-success" disabled><span class="fa fa-refresh fas spinning" style="margin-right:10px;"></span>@modalTitle</button>
                            }
                            else
                            {
                                <button type="submit" class="btn btn-block btn-success">@modalTitle</button>
                            }
                        </div>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>



@code {

    [Parameter]
    public Guid topicsId { get; set; }

    List<ChapterResponse> Chapter;

    ChapterResponse chapterResponse = new ChapterResponse();

    PaginationRequest Request = new PaginationRequest();

    ChapterRequest chapterRequest = new ChapterRequest();

    private string modalTitle { get; set; }

    private bool IsSearching { get; set; }

    private int totalAmountPages;

    bool Failure;

    private string ErrorMessage = null;

    private string ErrorMessageEdit = null;

    private Guid? HoldChapterId = null;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LoadChapter();
        }
        catch (Exception ex)
        {

        }
    }


    private async Task LoadChapter(string name = null)
    {
        var paginatedResponse = await _chapterService.GetAllAsync(topicsId, Request, name);

        Chapter = paginatedResponse.Response;

        totalAmountPages = paginatedResponse.TotalAmountPages;
    }

    private async Task SelectedPage(int page)
    {
        Request.Page = page;

        await LoadChapter();
    }


    private void AddChapter()
    {
        chapterRequest = new ChapterRequest();

        modalTitle = "Add New Chapter";
    }

    private void EditChapter(Guid? chapterId)
    {
        modalTitle = "Edit Chapter";

        chapterRequest = new ChapterRequest();

        var chapterSelected = Chapter.FirstOrDefault(x => x.Id == chapterId);

        chapterRequest.Name = chapterSelected.Name;

        HoldChapterId = chapterId;
    }

    private async Task SaveChapter()
    {
        IsSearching = true;
        StateHasChanged();

        var result = await _chapterService.CreateAsync(topicsId, chapterRequest);

        Failure = result.Token == null;

        if (!Failure)
        {
            await js.RemoveModal("New Project Added", $"{chapterRequest.Name}", SweetAlertMessageType.success);

            await LoadChapter();
        }

        ErrorMessage = result.Error;

        IsSearching = false;

        StateHasChanged();
    }

    private async Task SaveEditChapter()
    {
        IsSearching = true;

        StateHasChanged();

        var result = await _chapterService.UpdateAsync(topicsId, HoldChapterId, chapterRequest);

        Failure = result.Token == null;

        if (!Failure)
        {
            await js.RemoveModal("Project Details Updated", $"{chapterRequest.Name}", SweetAlertMessageType.success);

            await LoadChapter();
        }

        ErrorMessageEdit = result.Error;

        IsSearching = false;

        StateHasChanged();
    }

    private async Task Delete(Guid? ChapterId)
    {
        var chapterSelected = Chapter.FirstOrDefault(x => x.Id == ChapterId);

        if (await js.Confirm("Confirm", $"Do you want to delete { chapterSelected.Name } ?", SweetAlertMessageType.question))
        {
            await _chapterService.DeleteAsync(topicsId, ChapterId);

            await js.RemoveModal("Deleted", $"{chapterSelected.Name} chapter from the Project", SweetAlertMessageType.success);

            await LoadChapter();
        }
    }
}