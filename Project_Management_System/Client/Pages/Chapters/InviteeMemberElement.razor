@using Blazored.Typeahead

<div class="card card-primary card-outline collapsed-card">
    <div class="card-header">
        <h3 class="card-title">INVITEE MEMBERS</h3>

        <div class="card-tools">
            <button type="button" class="btn btn-tool" data-card-widget="collapse">
                <i class="fa fa-plus"></i>
            </button>
        </div>
    </div>

    <div class="card-body p-0 m">
        <div class="row">
            <div class="col-md-12 p-3">
                <h6>Search for a Member</h6>
                <BlazoredTypeahead SearchMethod="SearchUsername" @bind-Value="SelectedUsername" placeholder="Search Name">
                    <SelectedTemplate>
                        @context.UserName
                    </SelectedTemplate>
                    <ResultTemplate>
                        @if (context.UserName == username.UserName)
                        {
                            <h6>Member Request Can't Be Sent</h6>
                        }
                        else
                        {
                            @context.UserName
                        }
                    </ResultTemplate>
                </BlazoredTypeahead>

                @if (SelectedUsername != null)
                {

                    @if (SelectedUsername.UserName == username.UserName)
                    {
                        <hr />
                        <h6>Member Request Can't Be Sent</h6>
                    }
                    else
                    {
                        <hr />
                        <div class="row">
                            <div class="col-md-12">
                                <button type="submit" class="btn btn-block btn-danger" @onclick="@(() => SentUser(SelectedUsername.UserName))">
                                    @SelectedUsername.UserName - Sent Request
                                </button>
                            </div>
                        </div>
                    }

                }
            </div>

        </div>
        <div class="card-footer text-center">
            <a href="javascript::">SENT REQUESTS</a>
        </div>
        <div class="card-body p-0">
            <ul class="users-list clearfix">
                <GenericThirdList Elements="inviteeResponsesPending">
                    <WithElementsTemplate>
                        @foreach (var item in inviteeResponsesPending.OrderByDescending(x => x.AcceptedDate))
                        {
                            <li>
                                @if (item.AppUser.Images == null)
                                {
                                    <img src="Images/blank-person.png" alt="User Image" style="cursor:pointer" data-toggle="modal" data-target="#ViewUserInvitee"
                                         @onclick="@(() => ViewUsername(item.AppUser.UserName))">
                                }
                                else
                                {
                                    <img src="Images/@item.AppUser.Images" alt="User Image" style="cursor:pointer" data-toggle="modal" data-target="#ViewUserInvitee"
                                         @onclick="@(() => ViewUsername(item.AppUser.UserName))">
                                }
                                <span class="users-list-date">
                                    <a style="cursor:pointer" data-toggle="modal" data-target="#ViewUserModal"
                                       @onclick="@(() => ViewUsername(item.AppUser.UserName))">
                                        @item.AppUser.UserName
                                    </a>
                                </span>
                            </li>
                        }
                    </WithElementsTemplate>
                </GenericThirdList>
            </ul>
        </div>

    </div>
    <div class="card-footer text-center">
        <Pagination CurrentPage="RequestPending.Page" Radius="4" TotalPagesQuantity="totalAmountPagesPending"
                    SelectedPage="SelectedPage" />
    </div>
</div>


<div class="modal fade" id="ViewUserInvitee">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title">View @inviteePending.UserName Profile</h3>
                <button type="button" class="close" data-dismiss="modal">
                    <span aria-hidden="true">X</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col-md-5 col-sm-5">
                        @if (inviteePending.Images == null)
                        {
                            <img src="Images/blank-person.png" class="img-fluid img-circle" alt="User Image">
                        }
                        else
                        {
                            <img src="Images/@inviteePending.Images" class="img-fluid img-circle" alt="User Image">
                        }
                    </div>
                    <div class="col-md-7 col-sm-7">
                        <div class="row">
                            <div class="col-md-12">
                                <h2>@inviteePending.FirstName @inviteePending.LastName</h2>
                                <h5>#@inviteePending.UserName</h5>
                            </div>

                            <div class="col-md-12">
                                <button type="submit" class="btn btn-block btn-danger" @onclick="@(() => DeleteUser(inviteePending.UserName))">
                                    <i class="nav-icon fa fa-trash"></i>
                                    Remove Sent Request
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>



@code{

    [Parameter]
    public Guid? topicsPendingId { get; set; }

    [Parameter]
    public TopicsResponse topicsResponse { get; set; } = new TopicsResponse();

    [Parameter]
    public UsernameResponse username { get; set; } = new UsernameResponse();

    private HubConnection _hubConnection;

    List<InviteeResponse> inviteeResponsesPending;

    UsernameResponse inviteePending = new UsernameResponse();

    InviteeAcceptRequest acceptRequestPending = new InviteeAcceptRequest();

    InviteeSentRequest acceptInviteePending = new InviteeSentRequest();

    PaginationRequest RequestPending = new PaginationRequest();

    private UsernameResponse SelectedUsername;

    private int totalAmountPagesPending;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await GetUserPending();

            _hubConnection = new HubConnectionBuilder()
                               .WithUrl(NavigationManager.ToAbsoluteUri("/chatroomHub"))
                               .Build();

            await _hubConnection.StartAsync();

            await _hubConnection.SendAsync("AddToGroup", topicsPendingId, "");

            _hubConnection.On<string, string, string, string>("RecieveAccept", (username, Images, firstname, lastname) =>
            {
                var inviteeMember = inviteeResponsesPending.Where(s => s.AppUser.UserName == username).SingleOrDefault();

                inviteeResponsesPending.Remove(inviteeMember);

                StateHasChanged();
            });

        }
        catch (Exception ex)
        {

        }
    }

    private async Task SelectedPage(int page)
    {
        RequestPending.Page = page;

        await GetUserPending();
    }


    private async Task GetUserPending(string name = null)
    {
        var paginatedResponse = await _inviteeService.GetPendingUser(topicsPendingId, RequestPending, name);

        inviteeResponsesPending = paginatedResponse.Response;

        totalAmountPagesPending = paginatedResponse.TotalAmountPages;
    }


    private void ViewUsername(string username)
    {
        inviteePending = new UsernameResponse();

        var chapterSelected = inviteeResponsesPending.FirstOrDefault(x => x.AppUser.UserName == username);

        inviteePending.UserName = chapterSelected.AppUser.UserName;

        inviteePending.FirstName = chapterSelected.AppUser.FirstName;

        inviteePending.LastName = chapterSelected.AppUser.LastName;

        inviteePending.Images = chapterSelected.AppUser.Images;
    }


    private async Task DeleteUser(string username)
    {
        acceptRequestPending = new InviteeAcceptRequest();

        acceptRequestPending.acceptance = false;
        acceptRequestPending.username = username;

        if (await js.Confirm("Confirm", $"Do you want to cancel this sent request from this project ?", SweetAlertMessageType.question))
        {
            await _inviteeService.RemoveInvitation(topicsPendingId, acceptRequestPending);


            await js.RemoveModal("Remove the Request to", $"{username}", SweetAlertMessageType.success);

            await GetUserPending();
        }
    }

    private async Task<IEnumerable<UsernameResponse>> SearchUsername(string searchText)
    {
        return await _accountService.GetAllAsync(searchText);
    }

    private async Task SentUser(string username)
    {
        acceptInviteePending = new InviteeSentRequest();

        acceptInviteePending.RoleStatus = true;
        acceptInviteePending.UserName = username;

        if (await js.Confirm("Confirm", $"Do you sent {username} request for this project ?", SweetAlertMessageType.question))
        {
            await _inviteeService.SentInvitation(topicsPendingId, acceptInviteePending);

            SelectedUsername = null;

            await js.RemoveModal("Request Sent to", $"{username}", SweetAlertMessageType.success);

            await GetUserPending();
        }
    }
}