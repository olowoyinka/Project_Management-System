@page "/projects/{topicsId:guid}"

@page "/projects/{topicsId:guid}/{chapterId:guid}"

@implements IDisposable

<section class="content-header">
    <div class="container-fluid">
        <section class="content">
            <div class="row">

                <div class="col-md-3">
                    <ChapterElement topicsId="topicsId" />
                </div>

                <div class="col-md-6">
                    <div class="card card-outline card-primary">
                        @if (chapterId == Guid.Empty)
                        {

                        }
                        else
                        {
                            @if (chapterByIdResponse == null)
                            {
                                <div class="card-header">
                                </div>
                                <div class="card-body pad">
                                    <div class="mb-3">
                                        <div class="linear-activity">
                                            <div class="indeterminate"></div>
                                        </div>
                                    </div>
                                    <p class="text-sm mb-0">
                                        @*Editor <a href="https://github.com/bootstrap-wysiwyg/bootstrap3-wysiwyg">
                                                Documentation and license
                                                information.
                                            </a>*@
                                    </p>
                                </div>
                            }
                            else
                            {
                                <div class="card-header">
                                    <h3 class="card-title">
                                        @chapterByIdResponse.Name
                                    </h3>
                                    <div class="card-tools">
                                        Updated @currentDate

                                        @if (IsSearching)
                                        {
                                            <button type="submit" class="btn btn-primary" @onclick="@SaveBody" disabled>
                                                <span class="fa fa-refresh fas spinning" style="margin-right:10px;"></span>
                                                Updating
                                            </button>
                                        }
                                        else
                                        {
                                            <button type="submit" class="btn btn-primary" @onclick="@SaveBody">
                                                Updated
                                            </button>
                                        }
                                        <button type="button" class="btn btn-tool btn-sm" data-card-widget="collapse" data-toggle="tooltip"
                                                title="Collapse">
                                            <i class="fa fa-minus"></i>
                                        </button>
                                    </div>
                                </div>
                                <div class="card-body pad">
                                    <div class="mb-3">
                                        @*<textarea class="textarea" placeholder="Place some text here"
                                                      style="width: 100%; height: 200px; font-size: 14px; line-height: 18px; border: 1px solid #dddddd; padding: 10px;">
                                               @chapterByIdResponse.Body
                                            </textarea>*@
                                        @*<Texteditor QuillHtml="@QuillHtml"></Texteditor>*@

                                        <BlazoredTextEditor @ref="@QuillHtml">
                                            <ToolbarContent>
                                                <select class="ql-header">
                                                    <option selected=""></option>
                                                    <option value="1"></option>
                                                    <option value="2"></option>
                                                    <option value="3"></option>
                                                    <option value="4"></option>
                                                    <option value="5"></option>
                                                </select>
                                                <span class="ql-formats">
                                                    <button class="ql-bold"></button>
                                                    <button class="ql-italic"></button>
                                                    <button class="ql-underline"></button>
                                                    <button class="ql-strike"></button>
                                                </span>
                                                <span class="ql-formats">
                                                    <select class="ql-color"></select>
                                                    <select class="ql-background"></select>
                                                </span>
                                                <span class="ql-formats">
                                                    <button class="ql-list" value="ordered"></button>
                                                    <button class="ql-list" value="bullet"></button>
                                                    <button class="ql-indent" value="-1"></button>
                                                    <button class="ql-indent" value="+1"></button>
                                                    <select class="ql-align">
                                                        <option selected=""></option>
                                                        <option value="center"></option>
                                                        <option value="right"></option>
                                                        <option value="justify"></option>
                                                    </select>
                                                </span>
                                                <span class="ql-formats">
                                                    <button class="ql-link"></button>
                                                </span>
                                            </ToolbarContent>
                                            <EditorContent>
                                            </EditorContent>
                                        </BlazoredTextEditor>
                                    </div>
                                    <p class="text-sm mb-0">
                                        @*Editor <a href="https://github.com/bootstrap-wysiwyg/bootstrap3-wysiwyg">
                                                Documentation and license
                                                information.
                                            </a>*@
                                    </p>
                                </div>
                            }
                        }
                    </div>
                </div>

                <div class="col-md-3">

                    <MemberElement topicsId="topicsId" topicsResponse="topicsResponse" username="username" />

                    <InviteeMemberElement topicsPendingId="topicsId" topicsResponse="topicsResponse" username="username" />

                    <ChatElement topicsId="topicsId" username="username" />

                </div>
            </div>
        </section>
    </div>
</section>



@code{

    BlazoredTextEditor QuillHtml;

    [Parameter]
    public Guid topicsId { get; set; }

    [Parameter]
    public Guid chapterId { get; set; }

    [Parameter]
    public TopicsResponse topicsResponse { get; set; } = new TopicsResponse();

    [Parameter]
    public UsernameResponse username { get; set; } = new UsernameResponse();

    ChapterByIdResponse chapterByIdResponse = new ChapterByIdResponse();

    CancellationTokenSource pollingCancellationToken;

    private DateTime currentDate;

    private bool IsSearching { get; set; }

    bool Failure;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            topicsResponse = await _topicsService.GetByIdAsync(topicsId);

            username = await _accountService.GetUser();
        }
        catch (Exception ex)
        {

        }
    }


    protected async override Task OnParametersSetAsync()
    {
        chapterByIdResponse = await _editbodyService.GetByIdAsync(topicsId, chapterId);

        await QuillHtml.LoadContent(chapterByIdResponse.Body);

        currentDate = chapterByIdResponse.CreatedDate;

        pollingCancellationToken?.Cancel();

        UpdatesBody();

        await js.ModalClose();
    }


    private async void UpdatesBody()
    {

        pollingCancellationToken = new CancellationTokenSource();

        while (!pollingCancellationToken.IsCancellationRequested)
        {
            try
            {

                string ErrorMessage;
                IsSearching = true;
                StateHasChanged();

                ChapterEditRequest chapterEditRequest = new ChapterEditRequest();

                chapterEditRequest.Body = await QuillHtml.GetContent();

                var result = await _editbodyService.UpdateBodyAsync(topicsId, chapterId, chapterEditRequest);

                Failure = result.Token == null;

                ErrorMessage = result.Error;

                if (ErrorMessage != null)
                {
                    await js.RemoveModal("Unable to Updated", $"{chapterByIdResponse.Name}", SweetAlertMessageType.error);
                }

                currentDate = DateTime.Now;

                IsSearching = false;
                StateHasChanged();
            }
            catch (Exception ex)
            {
                pollingCancellationToken.Cancel();

                Console.Error.WriteLine(ex);
            }

            StateHasChanged();

            await Task.Delay(100000);
        }

    }


    private async Task SaveBody()
    {
        string ErrorMessage;
        IsSearching = true;
        StateHasChanged();

        ChapterEditRequest chapterEditRequest = new ChapterEditRequest();

        chapterEditRequest.Body = await QuillHtml.GetContent();

        var result = await _editbodyService.UpdateBodyAsync(topicsId, chapterId, chapterEditRequest);

        Failure = result.Token == null;

        ErrorMessage = result.Error;

        if (ErrorMessage != null)
        {
            await js.RemoveModal("Unable to Update", $"{chapterByIdResponse.Name}", SweetAlertMessageType.error);
        }

        currentDate = DateTime.Now;

        IsSearching = false;
        StateHasChanged();
    }

    void IDisposable.Dispose()
    {
        pollingCancellationToken?.Cancel();
    }

}